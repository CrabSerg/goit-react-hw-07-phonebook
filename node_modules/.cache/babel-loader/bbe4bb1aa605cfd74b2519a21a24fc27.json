{"ast":null,"code":"import { createSlice, isAnyOf } from '@reduxjs/toolkit';\nimport { fetchContacts, addContact, deleteContact } from './operation';\nconst initialState = {\n  contacts: [],\n  isLoading: false,\n  error: null\n};\nconst extaActions = [fetchContacts, addContact, deleteContact];\n\nconst getActions = type => extaActions.map(action => action[type]);\n\nconst fulfilledReducer = (state, action) => {\n  state.isLoading = false;\n  state.error = null;\n};\n\nconst pendingReducer = state => {\n  state.isLoading = true;\n};\n\nconst rejectedReducer = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nconst fetchContactsReducer = (state, action) => {\n  state.contacts = action.payload;\n};\n\nconst addContactReducer = (state, action) => {\n  state.contacts.push(action.payload);\n};\n\nconst deleteContactReducer = (state, action) => {\n  const index = state.contacts.findIndex(contact => contact.id === action.payload.id);\n  state.contacts.splice(index, 1);\n};\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState,\n  extraReducers: builder => {\n    builder.addCase(fetchContacts.fulfilled, fetchContactsReducer).addCase(addContact.fulfilled, addContactReducer).addCase(deleteContact.fulfilled, deleteContactReducer).addMatcher(isAnyOf(...getActions('pending')), pendingReducer).addMatcher(isAnyOf(...getActions('rejected')), rejectedReducer).addMatcher(isAnyOf(...getActions('fulfilled')), fulfilledReducer);\n  }\n});\nexport const contactsReducer = contactsSlice.reducer;","map":{"version":3,"sources":["C:/Users/Serg007/OneDrive/Документы/GitHub/goit-react-hw-07-phonebook/src/redux/contactsSlice.js"],"names":["createSlice","isAnyOf","fetchContacts","addContact","deleteContact","initialState","contacts","isLoading","error","extaActions","getActions","type","map","action","fulfilledReducer","state","pendingReducer","rejectedReducer","payload","fetchContactsReducer","addContactReducer","push","deleteContactReducer","index","findIndex","contact","id","splice","contactsSlice","name","extraReducers","builder","addCase","fulfilled","addMatcher","contactsReducer","reducer"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,OAAtB,QAAqC,kBAArC;AACA,SAASC,aAAT,EAAwBC,UAAxB,EAAoCC,aAApC,QAAyD,aAAzD;AAEA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,QAAQ,EAAE,EADS;AAEnBC,EAAAA,SAAS,EAAE,KAFQ;AAGnBC,EAAAA,KAAK,EAAE;AAHY,CAArB;AAMA,MAAMC,WAAW,GAAG,CAACP,aAAD,EAAgBC,UAAhB,EAA4BC,aAA5B,CAApB;;AACA,MAAMM,UAAU,GAAGC,IAAI,IAAIF,WAAW,CAACG,GAAZ,CAAgBC,MAAM,IAAIA,MAAM,CAACF,IAAD,CAAhC,CAA3B;;AAEA,MAAMG,gBAAgB,GAAG,CAACC,KAAD,EAAQF,MAAR,KAAmB;AAC1CE,EAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,EAAAA,KAAK,CAACP,KAAN,GAAc,IAAd;AACD,CAHD;;AAKA,MAAMQ,cAAc,GAAGD,KAAK,IAAI;AAC9BA,EAAAA,KAAK,CAACR,SAAN,GAAkB,IAAlB;AACD,CAFD;;AAIA,MAAMU,eAAe,GAAG,CAACF,KAAD,EAAQF,MAAR,KAAmB;AACzCE,EAAAA,KAAK,CAACR,SAAN,GAAkB,KAAlB;AACAQ,EAAAA,KAAK,CAACP,KAAN,GAAcK,MAAM,CAACK,OAArB;AACD,CAHD;;AAKA,MAAMC,oBAAoB,GAAG,CAACJ,KAAD,EAAQF,MAAR,KAAmB;AAC9CE,EAAAA,KAAK,CAACT,QAAN,GAAiBO,MAAM,CAACK,OAAxB;AACD,CAFD;;AAIA,MAAME,iBAAiB,GAAG,CAACL,KAAD,EAAQF,MAAR,KAAmB;AAC3CE,EAAAA,KAAK,CAACT,QAAN,CAAee,IAAf,CAAoBR,MAAM,CAACK,OAA3B;AACD,CAFD;;AAIA,MAAMI,oBAAoB,GAAG,CAACP,KAAD,EAAQF,MAAR,KAAmB;AAC9C,QAAMU,KAAK,GAAGR,KAAK,CAACT,QAAN,CAAekB,SAAf,CACZC,OAAO,IAAIA,OAAO,CAACC,EAAR,KAAeb,MAAM,CAACK,OAAP,CAAeQ,EAD7B,CAAd;AAGAX,EAAAA,KAAK,CAACT,QAAN,CAAeqB,MAAf,CAAsBJ,KAAtB,EAA6B,CAA7B;AACD,CALD;;AAOA,OAAO,MAAMK,aAAa,GAAG5B,WAAW,CAAC;AACvC6B,EAAAA,IAAI,EAAE,UADiC;AAEvCxB,EAAAA,YAAY,EAAEA,YAFyB;AAGvCyB,EAAAA,aAAa,EAAEC,OAAO,IAAI;AACxBA,IAAAA,OAAO,CACJC,OADH,CACW9B,aAAa,CAAC+B,SADzB,EACoCd,oBADpC,EAEGa,OAFH,CAEW7B,UAAU,CAAC8B,SAFtB,EAEiCb,iBAFjC,EAGGY,OAHH,CAGW5B,aAAa,CAAC6B,SAHzB,EAGoCX,oBAHpC,EAIGY,UAJH,CAIcjC,OAAO,CAAC,GAAGS,UAAU,CAAC,SAAD,CAAd,CAJrB,EAIiDM,cAJjD,EAKGkB,UALH,CAKcjC,OAAO,CAAC,GAAGS,UAAU,CAAC,UAAD,CAAd,CALrB,EAKkDO,eALlD,EAMGiB,UANH,CAMcjC,OAAO,CAAC,GAAGS,UAAU,CAAC,WAAD,CAAd,CANrB,EAMmDI,gBANnD;AAOD;AAXsC,CAAD,CAAjC;AAcP,OAAO,MAAMqB,eAAe,GAAGP,aAAa,CAACQ,OAAtC","sourcesContent":["import { createSlice, isAnyOf } from '@reduxjs/toolkit';\nimport { fetchContacts, addContact, deleteContact } from './operation';\n\nconst initialState = {\n  contacts: [],\n  isLoading: false,\n  error: null,\n};\n\nconst extaActions = [fetchContacts, addContact, deleteContact];\nconst getActions = type => extaActions.map(action => action[type]);\n\nconst fulfilledReducer = (state, action) => {\n  state.isLoading = false;\n  state.error = null;\n};\n\nconst pendingReducer = state => {\n  state.isLoading = true;\n};\n\nconst rejectedReducer = (state, action) => {\n  state.isLoading = false;\n  state.error = action.payload;\n};\n\nconst fetchContactsReducer = (state, action) => {\n  state.contacts = action.payload;\n};\n\nconst addContactReducer = (state, action) => {\n  state.contacts.push(action.payload);\n};\n\nconst deleteContactReducer = (state, action) => {\n  const index = state.contacts.findIndex(\n    contact => contact.id === action.payload.id\n  );\n  state.contacts.splice(index, 1);\n};\n\nexport const contactsSlice = createSlice({\n  name: 'contacts',\n  initialState: initialState,\n  extraReducers: builder => {\n    builder\n      .addCase(fetchContacts.fulfilled, fetchContactsReducer)\n      .addCase(addContact.fulfilled, addContactReducer)\n      .addCase(deleteContact.fulfilled, deleteContactReducer)\n      .addMatcher(isAnyOf(...getActions('pending')), pendingReducer)\n      .addMatcher(isAnyOf(...getActions('rejected')), rejectedReducer)\n      .addMatcher(isAnyOf(...getActions('fulfilled')), fulfilledReducer);\n  },\n});\n\nexport const contactsReducer = contactsSlice.reducer;\n"]},"metadata":{},"sourceType":"module"}